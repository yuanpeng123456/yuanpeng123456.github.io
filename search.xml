<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3</title>
      <link href="/posts/d760.html"/>
      <url>/posts/d760.html</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"msg"</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/posts/456f.html"/>
      <url>/posts/456f.html</url>
      
        <content type="html"><![CDATA[<h4 id="一、JavaScript基础语法"><a href="#一、JavaScript基础语法" class="headerlink" title="一、JavaScript基础语法"></a>一、JavaScript基础语法</h4><h6 id="1-编写JavaScript的位置"><a href="#1-编写JavaScript的位置" class="headerlink" title="1.编写JavaScript的位置"></a>1.编写JavaScript的位置</h6><ul><li><p>HTML代码行内</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript: alert(<span class="token punctuation">'</span>百度一下<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>百度一下<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>script标签中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'yuan'</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>外部的js文件中</p></li></ul><h6 id="2-noscript-元素"><a href="#2-noscript-元素" class="headerlink" title="2.noscript 元素"></a>2.noscript 元素</h6><p>对于运行的浏览器不支持JavaScript，可以给用户一个友好的提示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>您的浏览器不支持JavaScript, 请更换浏览器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span></code></pre><h6 id="3-JavaScript编写时的注意事项"><a href="#3-JavaScript编写时的注意事项" class="headerlink" title="3.JavaScript编写时的注意事项"></a>3.JavaScript编写时的注意事项</h6><ul><li>script标签不能写成但标签</li><li>省略type属性:在以前的代码中，script标签会使用type=’text/javascript’,现在可以不写这个代码了，因为JavaScript是所有现代浏览器以及HTML5中的默认脚本语言</li><li>js默认自上而下加载，推荐将js代码编写位置放在body子元素的最后一行</li><li>js代码严格区分大小写</li></ul><h6 id="4-js的交互方式"><a href="#4-js的交互方式" class="headerlink" title="4.js的交互方式"></a>4.js的交互方式</h6><ul><li><p>alert: 弹窗查看</p><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello js'</span><span class="token punctuation">)</span></code></pre></li><li><p>console.log: 控制台查看</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello js'</span><span class="token punctuation">)</span></code></pre></li><li><p>document.write: 再浏览器页面查看</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello js'</span><span class="token punctuation">)</span></code></pre></li><li><p>prompt: 在浏览器接受用户的输入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入您的名字:"</span><span class="token punctuation">)</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您刚才输入的是:"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span></code></pre></li></ul><h6 id="5-js的注释"><a href="#5-js的注释" class="headerlink" title="5.js的注释"></a>5.js的注释</h6><ul><li><p>单行注释</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.单行注释</span></code></pre></li><li><p>多行注释</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*  我一行注释 我是另外一行注释*/</span></code></pre></li><li><p>文档注释</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** 和某人打招呼* @param {string} name 姓名* @param {number} age 年龄*/</span><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h6 id="6-js的数据类型"><a href="#6-js的数据类型" class="headerlink" title="6.js的数据类型"></a>6.js的数据类型</h6><pre class=" language-js"><code class="language-js">Number String Boolean Undefined Null Object BigInt Symbol</code></pre><p>判断一个数据的类型:</p><p>(1) typeof: 其中数组，对象，null都会判断为object</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// object    </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// object</span></code></pre><p>(2) instanceof: 可以正确判断引用类型的数据类型，不能判断基本数据的类型</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>(3) Object.prototype.toString.call()</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Function]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Null]</span></code></pre><h6 id="7-js数据类型的转换"><a href="#7-js数据类型的转换" class="headerlink" title="7.js数据类型的转换"></a>7.js数据类型的转换</h6><p>(1) number,boolean转为string</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 隐式转换</span><span class="token keyword">let</span> numStr <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">let</span> ageStr <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">let</span> flagStr <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.显式转换</span><span class="token keyword">let</span> numStr1 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>(2)其他类型转换为number</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方式一: 隐式转换(用的很少)</span><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token string">"8"</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token string">"4"</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2 <span class="token comment" spellcheck="true">// 84</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result1<span class="token punctuation">)</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> num1 <span class="token operator">*</span> num2console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 方式二: 显示转换(Number())</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result3<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 其他类型转成数字类型的规则:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"         123       "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span></code></pre><p>(3) 其他类型转换为Boolean</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 0/""/undefined/null/NaN -> false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h6 id="8-x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#8-x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="8.==和===的区别"></a>8.==和===的区别</h6><pre class=" language-js"><code class="language-js"><span class="token operator">==</span>运算符在类型不同的情况下会先进行类型转换，然后再比较；而<span class="token operator">===</span>运算符在类型不同的情况下会直接返回<span class="token boolean">false</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"yuan"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">110</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">110</span> <span class="token operator">==</span> info<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//在Symbol.toPrimitive属性的帮助下可以将一个对象转化为原始值</span></code></pre><h4 id="二、js包装类"><a href="#二、js包装类" class="headerlink" title="二、js包装类"></a>二、js包装类</h4><h6 id="1-包装类的基本概念"><a href="#1-包装类的基本概念" class="headerlink" title="1.包装类的基本概念"></a>1.包装类的基本概念</h6><p>原始类型是简单的值，默认并不能调用属性和方法，然而事实却并非如此，这是因为js为了可以使其获取属性和方法，对其封装了对应的包装类；</p><p>常见的包装类有：String、Number、Boolean、Symbol、BigInt；</p><p>注意：null和undefined没有任何的方法，也没有对应的对象包装类；</p><p>包装类型的使用过程：</p><ul><li>根据原始值，创建一个原始类型对应的包装类对象；</li><li>调用对应的属性或方法，返回一个新的值；</li><li>创建的包装类对象被销毁</li><li>通常js引擎会进行很多的优化，它可以跳过创建包装类的过程在内部直接完成属性的获取或者方法的调用；</li></ul><h6 id="2-Number类"><a href="#2-Number类" class="headerlink" title="2.Number类"></a>2.Number类</h6><p>(1) Number属性：</p><p>Number.MAX_SAFE_INTEGER：js中的最大安全整数(2^53 - 1)；</p><p>Number.MIN_SAFE_INTEGER：js中的最小安全整数 -(2^53 - 1)；</p><p>Number.MAX_VALUE：js里所能表达的最大数值(1.7976931348623157e+308)；</p><p>Number.MIN_VALUE：js里所能表达的最小数值(5e-324)；</p><p>(2) Number实例方法:</p><p>toString(base)：将数字转化为字符串，并且按照base进制进行转化，base的范围可以从2到36，默认情况下是10</p><p>注意：如果是对一个数字操作，需要使用..运算符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>toFixed(digits)：格式化一个数字，保留digits位的小数，digits的范围是0-20(包含)之间；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> pi <span class="token operator">=</span> <span class="token number">3.1415926</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3.14</span></code></pre><blockquote><p>Number类方法</p></blockquote><p>parseInt(string)：将字符串解析成整数，也有对应的全局方法parseInt</p><p>parseFloat(string)：将字符串解析成浮点数，也有对应的全局方法parseFloat</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token string">"123.521"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// window对象上面</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parseInt <span class="token operator">===</span> Number<span class="token punctuation">.</span>parseInt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h6 id="3-Math对象"><a href="#3-Math对象" class="headerlink" title="3.Math对象"></a>3.Math对象</h6><p>(1) Math常见的属性:</p><p>Math.PI：圆周率</p><p>(2) Math常见的方法:</p><pre class=" language-html"><code class="language-html">Math.floor: 向下取整Math.ceil：向上取整Math.round：四舍五入取整Math.random：生成0~1的随机数(包含0，不包含1)Math.pow(x,y)：返回x的y次幂</code></pre><h6 id="4-String类"><a href="#4-String类" class="headerlink" title="4.String类"></a>4.String类</h6><p>(1) String常见的属性: length(获取字符串的长度)</p><p>(2) 访问字符串的字符：</p><ul><li>通过字符串的索引str[0]</li><li>通过str.charAt()方法</li></ul><p>它们的区别是索引的方式没有找到会返回undefined，而chartAt没有找到会返回空字符串；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello World"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//o</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//o</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// </span></code></pre><p>(3) 字符串的遍历：</p><ul><li>for循环</li><li>for…of遍历: 遍历的对象是具有迭代器的对象：如字符串、数组等，不支持对象(给对象添加迭代器属性后就可以遍历)</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> message<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> char <span class="token keyword">of</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>(4) 字符串的修改：</p><p>字符串在定义后是不可修改的，所以下面的操作是没有任何意义的；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"hello world"</span>message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"A"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello world</span></code></pre><p>在我们改变字符串的操作中，都是生成了一个新的字符串；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello World"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// HELLO WORLD</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// hello world</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello World</span></code></pre><p>(5) 查找字符串：</p><ul><li>indexOf(searchString, fromIndex)：搜索到返回字符串所在索引位置，如没有搜索到返回-1</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"my name is yuan"</span><span class="token keyword">var</span> index <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//11</span></code></pre><ul><li>includes：判断包含关系,如包含返回true，反之返回false</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"my name is yuan"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><ul><li>startsWith: 是否以xxx开头</li><li>endsWith: 是否以xxx结尾</li><li>replace: 替换字符串</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"my name is yuan"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">,</span> <span class="token string">"your"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// your name is yuan</span></code></pre><p>(6) 获取子字符串</p><ul><li>slice(start,end): 不包含end，允许负值参数</li><li>substring(start,end): 不包含end，负值代表0</li><li>substr(start,length): 从start开始获取长为length的字符串，允许start为负数</li></ul><p>开发中推荐使用slice</p><p>(7) 其他方法</p><ul><li>str.concat(str2,[,…strN]): 拼接字符串</li><li>str.trim(): 删除首尾空格</li><li>str.split(separator,limit): 字符串分割,separator:以什么字符串进行分割，可以是一个正则表达式；limit：限制返回片段的数量</li></ul><h4 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h4><h6 id="1-数组的创建方式"><a href="#1-数组的创建方式" class="headerlink" title="1.数组的创建方式"></a>1.数组的创建方式</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.</span><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"yuan"</span><span class="token punctuation">,</span> <span class="token string">"kobe"</span><span class="token punctuation">,</span> <span class="token string">"james"</span><span class="token punctuation">,</span> <span class="token string">"curry"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//2.</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3.</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 传入一个数字默认为我们要创建一个对应长度的数组</span></code></pre><h6 id="2-访问数组元素"><a href="#2-访问数组元素" class="headerlink" title="2.访问数组元素"></a>2.访问数组元素</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.通过中括号访问</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
